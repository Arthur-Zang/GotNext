{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { useState } from 'react';\nimport styles from \"./signin.styles\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { COLORS, SIZES } from \"../../constants/theme\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { HeightSpacer, ReusableButton, WidthSpacer } from \"../../components\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar validationSchema = Yup.object().shape({\n  password: Yup.string().min(8, \"Password must be at least 8 characters\").required('Required'),\n  email: Yup.string().email(\"Provide a valid email\").required('Required')\n});\nvar SignIn = function SignIn() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    loader = _useState2[0],\n    setLoader = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    response = _useState4[0],\n    setResponse = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    obscureText = _useState6[0],\n    setObscureText = _useState6[1];\n  var handleSignIn = function () {\n    var _ref = _asyncToGenerator(function* (values) {\n      setLoader(true);\n      try {\n        var _response = yield fetch('http://10.0.2.2/api/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: values.email,\n            password: values.password\n          })\n        });\n        if (_response.ok) {\n          var responseData = yield _response.json();\n          setResponse(responseData);\n          console.log(responseData);\n        } else {\n          console.error('Authentication failed');\n        }\n      } catch (error) {\n        console.error('Error during authentication:', error);\n      } finally {\n        setLoader(false);\n      }\n    });\n    return function handleSignIn(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Formik, {\n      initialValues: {\n        email: \"\",\n        password: \"\"\n      },\n      validationSchema: validationSchema,\n      onSubmit: function onSubmit(value) {},\n      children: function children(_ref2) {\n        var handleChange = _ref2.handleChange,\n          touched = _ref2.touched,\n          handleSubmit = _ref2.handleSubmit,\n          values = _ref2.values,\n          errors = _ref2.errors,\n          isValid = _ref2.isValid,\n          setFieldTouched = _ref2.setFieldTouched;\n        return _jsxs(View, {\n          children: [_jsxs(View, {\n            style: styles.wrapper,\n            children: [_jsx(Text, {\n              style: styles.label,\n              children: \"Email\"\n            }), _jsxs(View, {\n              children: [_jsxs(View, {\n                style: styles.inputWrapper(touched.email ? COLORS.lightBlue : COLORS.lightGrey),\n                children: [_jsx(MaterialCommunityIcons, {\n                  name: \"email-outline\",\n                  size: 20,\n                  color: COLORS.gray\n                }), _jsx(WidthSpacer, {\n                  width: 10\n                }), _jsx(TextInput, {\n                  placeholder: \"Enter your email\",\n                  onFocus: function onFocus() {\n                    setFieldTouched('email');\n                  },\n                  onBlur: function onBlur() {\n                    setFieldTouched('email', \"\");\n                  },\n                  value: values.email,\n                  onChangeText: handleChange('email'),\n                  autoCapitalize: \"none\",\n                  autoCorrect: false,\n                  style: {\n                    flex: 1\n                  }\n                })]\n              }), touched.email && errors.email && _jsx(Text, {\n                style: styles.errorMessage,\n                children: errors.email\n              })]\n            })]\n          }), _jsxs(View, {\n            style: styles.wrapper,\n            children: [_jsx(Text, {\n              style: styles.label,\n              children: \"Password\"\n            }), _jsxs(View, {\n              children: [_jsxs(View, {\n                style: styles.inputWrapper(touched.password ? COLORS.lightBlue : COLORS.lightGrey),\n                children: [_jsx(MaterialCommunityIcons, {\n                  name: \"lock-outline\",\n                  size: 20,\n                  color: COLORS.gray\n                }), _jsx(WidthSpacer, {\n                  width: 10\n                }), _jsx(TextInput, {\n                  secureTextEntry: obscureText,\n                  placeholder: \"Enter your password\",\n                  onFocus: function onFocus() {\n                    setFieldTouched('password');\n                  },\n                  onBlur: function onBlur() {\n                    setFieldTouched('password', \"\");\n                  },\n                  value: values.password,\n                  onChangeText: handleChange('password'),\n                  autoCapitalize: \"none\",\n                  autoCorrect: false,\n                  style: {\n                    flex: 1\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    setObscureText(!obscureText);\n                  },\n                  children: _jsx(MaterialCommunityIcons, {\n                    name: obscureText ? \"eye-outline\" : \"eye-off-outline\",\n                    size: 18\n                  })\n                })]\n              }), touched.password && errors.password && _jsx(Text, {\n                style: styles.errorMessage,\n                children: errors.password\n              })]\n            })]\n          }), _jsx(HeightSpacer, {\n            height: 20\n          }), _jsx(ReusableButton, {\n            onPress: handleSignIn,\n            btnText: \"SIGN IN\",\n            textColor: COLORS.white,\n            width: SIZES.width - 40,\n            backgroundColor: COLORS.green,\n            borderWidth: 0,\n            borderColor: COLORS.green\n          })]\n        });\n      }\n    })\n  });\n};\nexport default SignIn;","map":{"version":3,"names":["React","useState","styles","Formik","Yup","COLORS","SIZES","MaterialCommunityIcons","HeightSpacer","ReusableButton","WidthSpacer","jsx","_jsx","jsxs","_jsxs","validationSchema","object","shape","password","string","min","required","email","SignIn","_useState","_useState2","_slicedToArray","loader","setLoader","_useState3","_useState4","response","setResponse","_useState5","_useState6","obscureText","setObscureText","handleSignIn","_ref","_asyncToGenerator","values","fetch","method","headers","body","JSON","stringify","ok","responseData","json","console","log","error","_x","apply","arguments","View","style","container","children","initialValues","onSubmit","value","_ref2","handleChange","touched","handleSubmit","errors","isValid","setFieldTouched","wrapper","Text","label","inputWrapper","lightBlue","lightGrey","name","size","color","gray","width","TextInput","placeholder","onFocus","onBlur","onChangeText","autoCapitalize","autoCorrect","flex","errorMessage","secureTextEntry","TouchableOpacity","onPress","height","btnText","textColor","white","backgroundColor","green","borderWidth","borderColor"],"sources":["C:/Users/invic/Downloads/react-native-travel-app-starter-main/react-native-travel-app-starter-main/GotNext/screens/authentication/SignIn.jsx"],"sourcesContent":["import { View, Text, TextInput, TouchableOpacity } from 'react-native'\r\nimport React, {useState} from 'react'\r\nimport styles from './signin.styles'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { COLORS, SIZES } from '../../constants/theme'\r\nimport {MaterialCommunityIcons} from '@expo/vector-icons'\r\nimport { HeightSpacer, ReusableButton, WidthSpacer } from '../../components'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .required('Required'),\r\n    email: Yup.string()\r\n    .email(\"Provide a valid email\")\r\n    .required('Required')\r\n})\r\n\r\nconst SignIn = () => {\r\n    const [loader, setLoader] = useState(false);\r\n    const [response, setResponse] = useState(null);\r\n    const [obscureText, setObscureText] = useState(false);\r\n\r\n    const handleSignIn = async (values) => {\r\n        setLoader(true);\r\n\r\n        try {\r\n            const response = await fetch('http://10.0.2.2/api/auth/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    email: values.email,\r\n                    password: values.password,\r\n                }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                // Authentication successful\r\n                const responseData = await response.json();\r\n                setResponse(responseData);\r\n                // You can handle the successful response as needed\r\n                console.log(responseData);\r\n            } else {\r\n                // Authentication failed\r\n                console.error('Authentication failed');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error during authentication:', error);\r\n        } finally {\r\n            setLoader(false);\r\n        }\r\n    };\r\n  return (\r\n    <View style={styles.container}>\r\n      <Formik\r\n      initialValues={{email: \"\", password: \"\"}}\r\n      validationSchema={validationSchema}\r\n      onSubmit={(value)=>{}}>\r\n        {({\r\n            handleChange,\r\n            touched,\r\n            handleSubmit,\r\n            values,\r\n            errors,\r\n            isValid,\r\n            setFieldTouched\r\n        }) => (\r\n            <View>\r\n                <View style={styles.wrapper}>\r\n                    <Text style={styles.label}>Email</Text>\r\n                    <View>\r\n                        <View style={styles.inputWrapper(touched.email ? COLORS.lightBlue : COLORS.lightGrey)}>\r\n                            <MaterialCommunityIcons \r\n                            name=\"email-outline\"\r\n                            size={20}\r\n                            color={COLORS.gray}\r\n                            />\r\n                            <WidthSpacer width={10}/>\r\n                            <TextInput \r\n                            placeholder='Enter your email'\r\n                            onFocus={()=>{setFieldTouched('email')}}\r\n                            onBlur={()=>{setFieldTouched('email', \"\")}}\r\n                            value={values.email}\r\n                            onChangeText={handleChange('email')}\r\n                            autoCapitalize=\"none\"\r\n                            autoCorrect={false}\r\n                            style={{flex: 1}}\r\n                            />\r\n                        </View>\r\n                        {touched.email && errors.email && (\r\n                            <Text style={styles.errorMessage}>{errors.email}</Text>\r\n                        )}\r\n                    </View>\r\n                </View>\r\n                <View style={styles.wrapper}>\r\n                    <Text style={styles.label}>Password</Text>\r\n                    <View>\r\n                        <View style={styles.inputWrapper(touched.password ? COLORS.lightBlue : COLORS.lightGrey)}>\r\n                            <MaterialCommunityIcons \r\n                            name=\"lock-outline\"\r\n                            size={20}\r\n                            color={COLORS.gray}\r\n                            />\r\n                            <WidthSpacer width={10}/>\r\n                            <TextInput \r\n                            secureTextEntry={obscureText}\r\n                            placeholder='Enter your password'\r\n                            onFocus={()=>{setFieldTouched('password')}}\r\n                            onBlur={()=>{setFieldTouched('password', \"\")}}\r\n                            value={values.password}\r\n                            onChangeText={handleChange('password')}\r\n                            autoCapitalize=\"none\"\r\n                            autoCorrect={false}\r\n                            style={{flex: 1}}\r\n                            />\r\n                            <TouchableOpacity onPress={()=>{\r\n                                setObscureText(!obscureText)\r\n                            }}>\r\n                                <MaterialCommunityIcons\r\n                                    name={obscureText ? \"eye-outline\" : \"eye-off-outline\"}\r\n                                    size={18}\r\n\r\n                                />\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                        {touched.password && errors.password && (\r\n                            <Text style={styles.errorMessage}>{errors.password}</Text>\r\n                        )}\r\n                    </View>\r\n                </View>\r\n                <HeightSpacer height={20} />\r\n                <ReusableButton \r\n                    onPress= {handleSignIn}\r\n                    btnText = {\"SIGN IN\"}\r\n                    textColor = {COLORS.white}\r\n                    width = {SIZES.width-40}\r\n                    backgroundColor = {COLORS.green}\r\n                    borderWidth = {0}\r\n                    borderColor = {COLORS.green}\r\n                />\r\n            </View>\r\n        )}\r\n      </Formik>\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default SignIn"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}